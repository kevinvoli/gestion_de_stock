from sqlmodel import Session, select
from database.database import engine
from utils.logs.loggers import logger
import json


from datetime import datetime
import json

def serialize_data(data):
    """
    Convertit les objets datetime en cha√Ænes lisibles avant JSON serialization.
    """
    if isinstance(data, list):
        return [serialize_data(item) for item in data]
    elif isinstance(data, dict):
        return {key: serialize_data(value) for key, value in data.items()}
    elif isinstance(data, datetime):
        return data.isoformat()  # Convertit datetime en cha√Æne ISO 8601
    return data




class MiniORM:
    def __init__(self, model):
        """
        Initialise l'ORM avec un mod√®le SQLModel.
        :param model: La classe SQLModel correspondant √† la table.
        """
        self.model = model

    def validate_data(self, data):
        """
        V√©rifie les r√®gles m√©tiers sp√©cifiques √† chaque table.
        √Ä red√©finir si besoin dans une classe enfant.
        """
        return True, None  # (is_valid, error_message)

    def get_all(self):
        """ R√©cup√®re toutes les entr√©es de la table avec logs. """
        with Session(engine) as session:
            statement = select(self.model)
            results = session.exec(statement).all()
        
        logger.info(f"üìú R√©cup√©ration de {len(results)} entr√©es depuis {self.model.__name__}")
        return serialize_data([entry.model_dump() for entry in results])

    def get_by_id(self, id: int):
        """ R√©cup√®re une entr√©e par son ID avec logs. """
        with Session(engine) as session:
            statement = select(self.model).where(self.model.id == id)
            result = session.exec(statement).first()
        
        if result:
            logger.info(f"üîç R√©cup√©ration de {self.model.__name__} ID={id}")
            return json.dumps(serialize_data(result.model_dump()))
        
        logger.warning(f"‚ö†Ô∏è  {self.model.__name__} ID={id} introuvable")
        return json.dumps({"error": "Donn√©e non trouv√©e"})

    def create(self, data: dict):
        """ Cr√©e une nouvelle entr√©e avec validation et transaction. """
        is_valid, error_message = self.validate_data(data)
        if not is_valid:
            logger.warning(f"‚ùå Erreur de validation pour {self.model.__name__}: {error_message}")
            return {"error": error_message}

        with Session(engine) as session:
            try:
                new_entry = self.model(**data)
                session.add(new_entry)
                session.commit()
                session.refresh(new_entry)
                logger.info(f"‚úÖ {self.model.__name__} cr√©√© avec succ√®s: {new_entry.model_dump()}")
                return serialize_data(new_entry.model_dump())
            except Exception as e:
                session.rollback()
                logger.error(f"üî• Erreur lors de l'insertion dans {self.model.__name__}: {e}")
                return {"error": "Erreur lors de la cr√©ation"}

    def update(self, data: dict):
        """ Met √† jour une entr√©e existante avec logs et transaction. """
        with Session(engine) as session:
            statement = select(self.model).where(self.model.id == data["id"])
            entry = session.exec(statement).first()

            if not entry:
                logger.warning(f"‚ö†Ô∏è {self.model.__name__} ID={data['id']} introuvable pour mise √† jour")
                return {"error": "Donn√©e non trouv√©e"}

            try:
                for key, value in data.items():
                    if hasattr(entry, key):
                        setattr(entry, key, value)

                session.add(entry)
                session.commit()
                session.refresh(entry)
                logger.info(f"üîÑ {self.model.__name__} ID={data['id']} mis √† jour avec succ√®s")
                return serialize_data(entry.model_dump())
            except Exception as e:
                session.rollback()
                logger.error(f"üî• Erreur lors de la mise √† jour de {self.model.__name__}: {e}")
                return {"error": "Erreur lors de la mise √† jour"}

    def delete(self, id: int):
        """ Supprime une entr√©e (changement de statut) avec logs et transaction. """
        with Session(engine) as session:
            statement = select(self.model).where(self.model.id == id)
            entry = session.exec(statement).first()

            if not entry:
                logger.warning(f"‚ö†Ô∏è {self.model.__name__} ID={id} introuvable pour suppression")
                return {"error": "Donn√©e non trouv√©e"}

            try:
                entry.status = "non-actif"
                session.add(entry)
                session.commit()
                session.refresh(entry)
                logger.info(f"üóëÔ∏è {self.model.__name__} ID={id} marqu√© comme non-actif")
                return {"message": f"L'entr√©e {id} a √©t√© d√©sactiv√©e avec succ√®s"}
            except Exception as e:
                session.rollback()
                logger.error(f"üî• Erreur lors de la suppression de {self.model.__name__}: {e}")
                return {"error": "Erreur lors de la suppression"}
